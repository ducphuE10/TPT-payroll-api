"""contract update

Revision ID: 726f3020172f
Revises: ffc8327da2d3
Create Date: 2024-09-30 15:18:41.308819

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "726f3020172f"
down_revision: Union[str, None] = "ffc8327da2d3"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    constraints = inspector.get_foreign_keys("payroll_managements")
    if any(
        constraint["name"] == "payroll_managements_contract_id_fkey"
        for constraint in constraints
    ):
        op.drop_constraint(
            "payroll_managements_contract_id_fkey",
            "payroll_managements",
            type_="foreignkey",
        )

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "contract_histories",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("code", sa.String(length=20), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("is_probation", sa.Boolean(), nullable=False),
        sa.Column("employee_id", sa.String(length=20), nullable=False),
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=True),
        sa.Column(
            "payment_method",
            postgresql.ENUM("CASH", "BANK", name="paymentmethod", create_type=False),
            nullable=False,
        ),
        sa.Column("salary", sa.Float(), nullable=False),
        sa.Column("meal_benefit", sa.Float(), nullable=False),
        sa.Column("transportation_benefit", sa.Float(), nullable=False),
        sa.Column("housing_benefit", sa.Float(), nullable=False),
        sa.Column("toxic_benefit", sa.Float(), nullable=False),
        sa.Column("phone_benefit", sa.Float(), nullable=False),
        sa.Column("attendant_benefit", sa.Float(), nullable=False),
        sa.Column("created_by", sa.String(length=30), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["employee_id"],
            ["employees.code"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("code"),
    )
    op.drop_table("addendums")
    op.drop_table("tax_policies")
    op.drop_table("contracts")
    op.add_column(
        "employees",
        sa.Column(
            "is_probation",
            sa.Boolean(),
            nullable=False,
            server_default=sa.text("false"),
        ),
    )
    op.add_column(
        "employees",
        sa.Column(
            "start_date",
            sa.Date(),
            nullable=False,
            server_default=sa.func.current_date(),
        ),
    )
    op.add_column(
        "employees",
        sa.Column(
            "end_date", sa.Date(), nullable=True, server_default=sa.func.current_date()
        ),
    )
    op.add_column(
        "employees", sa.Column("salary", sa.Float(), nullable=False, server_default="0")
    )
    op.add_column(
        "employees",
        sa.Column("meal_benefit", sa.Float(), nullable=False, server_default="0"),
    )
    op.add_column(
        "employees",
        sa.Column(
            "transportation_benefit", sa.Float(), nullable=False, server_default="0"
        ),
    )
    op.add_column(
        "employees",
        sa.Column("housing_benefit", sa.Float(), nullable=False, server_default="0"),
    )
    op.add_column(
        "employees",
        sa.Column("toxic_benefit", sa.Float(), nullable=False, server_default="0"),
    )
    op.add_column(
        "employees",
        sa.Column("phone_benefit", sa.Float(), nullable=False, server_default="0"),
    )
    op.add_column(
        "employees",
        sa.Column("attendant_benefit", sa.Float(), nullable=False, server_default="0"),
    )
    op.add_column(
        "employees",
        sa.Column(
            "payment_method",
            postgresql.ENUM("CASH", "BANK", name="paymentmethod", create_type=False),
            nullable=True,
        ),
    )
    op.drop_column("employees", "hospital_info")
    op.drop_column("employees", "kcb_number")
    op.drop_column("employees", "temp_addr")
    op.drop_column("employees", "ethnic")
    op.drop_column("employees", "email")
    op.drop_column("employees", "religion")
    op.drop_column("employees", "domicile")
    op.drop_column("employees", "academic_level")
    op.add_column(
        "payroll_managements",
        sa.Column("contract_history_id", sa.Integer(), nullable=False),
    )

    op.create_foreign_key(
        None,
        "payroll_managements",
        "contract_histories",
        ["contract_history_id"],
        ["id"],
    )
    op.drop_column("payroll_managements", "contract_id")
    op.drop_column("shifts", "earliest_checkin")
    op.drop_column("shifts", "latest_checkout")
    op.drop_column("shifts", "earliest_checkout")
    op.drop_column("shifts", "checkout")
    op.drop_column("shifts", "latest_checkin")
    op.drop_column("shifts", "checkin")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "shifts",
        sa.Column("checkin", postgresql.TIME(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "shifts",
        sa.Column(
            "latest_checkin", postgresql.TIME(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "shifts",
        sa.Column("checkout", postgresql.TIME(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "shifts",
        sa.Column(
            "earliest_checkout", postgresql.TIME(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "shifts",
        sa.Column(
            "latest_checkout", postgresql.TIME(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "shifts",
        sa.Column(
            "earliest_checkin", postgresql.TIME(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "payroll_managements",
        sa.Column("contract_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "payroll_managements", type_="foreignkey")
    op.create_foreign_key(
        "payroll_managements_contract_id_fkey",
        "payroll_managements",
        "contracts",
        ["contract_id"],
        ["id"],
    )
    op.drop_column("payroll_managements", "contract_history_id")
    op.add_column(
        "employees",
        sa.Column(
            "academic_level", sa.VARCHAR(length=30), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "employees",
        sa.Column(
            "domicile", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "employees",
        sa.Column(
            "religion", sa.VARCHAR(length=30), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "employees",
        sa.Column("email", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    )
    op.add_column(
        "employees",
        sa.Column("ethnic", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "employees",
        sa.Column(
            "temp_addr", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "employees",
        sa.Column(
            "kcb_number", sa.VARCHAR(length=30), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "employees",
        sa.Column(
            "hospital_info", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
    )
    op.drop_column("employees", "payment_method")
    op.drop_column("employees", "attendant_benefit")
    op.drop_column("employees", "phone_benefit")
    op.drop_column("employees", "toxic_benefit")
    op.drop_column("employees", "housing_benefit")
    op.drop_column("employees", "transportation_benefit")
    op.drop_column("employees", "meal_benefit")
    op.drop_column("employees", "salary")
    op.drop_column("employees", "end_date")
    op.drop_column("employees", "start_date")
    op.drop_column("employees", "is_probation")
    op.create_table(
        "contracts",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('contracts_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("code", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM("ACTIVE", "INACTIVE", "PENDING", "DELETED", name="status"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "description", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "number_of_months", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column("is_probation", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "employee_code", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.Column("contract_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("signed_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("start_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("end_date", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column(
            "payment_method",
            postgresql.ENUM("CASH", "BANK", name="paymentmethod"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "attachments", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "salary",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "basic_salary",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "meal_benefit",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "transportation_benefit",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "housing_benefit",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "toxic_benefit",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "phone_benefit",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "attendant_benefit",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "template", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_by", sa.VARCHAR(length=30), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["employee_code"], ["employees.code"], name="contracts_employee_code_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="contracts_pkey"),
        sa.UniqueConstraint("code", name="contracts_code_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "tax_policies",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("code", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column(
            "tax_type",
            postgresql.ENUM("Progressive", "Fixed", name="taxtype"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "description", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "percentage",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "created_by", sa.VARCHAR(length=30), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name="tax_policies_pkey"),
        sa.UniqueConstraint("code", name="tax_policies_code_key"),
    )
    op.create_table(
        "addendums",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("code", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM("ACTIVE", "INACTIVE", "PENDING", "DELETED", name="status"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "description", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column("contract_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("addendum_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("signed_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("start_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column(
            "payment_method",
            postgresql.ENUM("CASH", "BANK", name="paymentmethod"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("new_position_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "new_salary",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "new_basic_salary",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "new_meal_benefit",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "new_transportation_benefit",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "new_housing_benefit",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "new_toxic_benefit",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "new_phone_benefit",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "new_attendant_benefit",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "template", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_by", sa.VARCHAR(length=30), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["contract_id"], ["contracts.id"], name="addendums_contract_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="addendums_pkey"),
        sa.UniqueConstraint("code", name="addendums_code_key"),
    )
    op.drop_table("contract_histories")
    # ### end Alembic commands ###
